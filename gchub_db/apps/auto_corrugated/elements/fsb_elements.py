import os
import subprocess
from shutil import copyfile
from xml.etree.ElementTree import ElementTree

from django.conf import settings
from reportlab.graphics import barcode
from reportlab.graphics.shapes import Drawing, Rect, String
from reportlab.lib.colors import CMYKColor
from reportlab.lib.units import inch, pica
from svglib import svglib

from includes.reportlib.elements.collidables import (
    CollidableElement,
    CollidableSVGGraphicElement,
)
from includes.reportlib.elements.generic import MultiLineTextElement
from includes.reportlib.util import convert_svg_to_color

# this is the folder where created barcodes are placed when they are finished being created by automation engine
CORRUGATED_BARCODE_DIR = os.path.join(settings.PRODUCTION_DIR, "barcodes")
# this is the folder where the templates for the barcode files are stored to me moved and renamed later which
# will trigger the automation engine workflow
CORRUGATED_BARTEMP_DIR = os.path.join(settings.PRODUCTION_DIR, "autocorr_elements")
# this is the hot folder automation engine is looking at for files to trigger the barcode workflow
CORRUGATED_BARHOTFOLDER_DIR = os.path.join(settings.PRODUCTION_DIR, "AutoCorrugatedAE_queue")
# this is the hot folder automation engine is looking at for files to trigger the label workflow
CORRUGATED_LABEL_DIR = os.path.join(settings.PRODUCTION_DIR, "AutoCorrugatedAE-LabelOnly_queue")

# these are the stock names of the barcode files
labelArea = "CorrugatedLabelArea"
sixDigit = "6Digit"

"""
Check to make sure both the six digit barcode exists and the labelAreaElement barcode exist for type = box_pdf and
only labelAreaElement for type = label
"""


def barcodeFileExists(label_id, type):
    # check to make sure labelArea is here for both types (box_pdf and label only)
    if os.path.exists(os.path.join(CORRUGATED_BARCODE_DIR, str(label_id) + "_" + labelArea + ".pdf")):
        # if the type is box_pdf we need to check for the other 6 digit file as well
        if type == "box_pdf":
            if os.path.exists(os.path.join(CORRUGATED_BARCODE_DIR, str(label_id) + "_" + sixDigit + ".pdf")):
                # at this point both files exist for type box_pdf so return true
                return True
            else:
                # type = box_pdf neds both files, the six digit is missing here so return False
                return False
        else:
            # if the type is not box_pdf then we only needed the first check which at this point exists so return true
            return True
    else:
        # Both types need the LabelAreaElement image so if it does not exist then return false
        return False


"""
Make both six digit and label area barcodes each time, worst case they overwrite any existing ones for type = box_pdf. for
type = label, it only needs the LabelAreaElement so we only kick off that different workflow hotfolder
"""


def triggerBarcodeCreation(label_id, type):
    # Move a template barcode file into the automation engine hotfolder for barcode creation
    # If type is box_pdf then we need to make both labels, not just the LabelAreaElement
    if type == "box_pdf":
        copyfile(
            os.path.join(CORRUGATED_BARTEMP_DIR, sixDigit + ".pdf"),
            os.path.join(CORRUGATED_BARHOTFOLDER_DIR, str(label_id) + "_" + sixDigit + ".pdf"),
        )
        copyfile(
            os.path.join(CORRUGATED_BARTEMP_DIR, labelArea + ".pdf"),
            os.path.join(CORRUGATED_BARHOTFOLDER_DIR, str(label_id) + "_" + labelArea + ".pdf"),
        )
    else:
        # The label type runs through a different workflow from a different hotfolder
        copyfile(
            os.path.join(CORRUGATED_BARTEMP_DIR, labelArea + ".pdf"),
            os.path.join(CORRUGATED_LABEL_DIR, str(label_id) + "_" + labelArea + ".pdf"),
        )


"""
This will place a barcode that has been generated by the automationEngine workflow. It assumes the barcode
exists and then adds it to the generated box pdf. barcode names should come in as "3456_6Digit"
"""


def place_barcode(self, barcode_file):
    file = os.path.join(CORRUGATED_BARCODE_DIR, barcode_file + ".pdf")
    newFile = os.path.join(CORRUGATED_BARCODE_DIR, barcode_file + ".svg")

    command = "inkscape " + file + " -l " + newFile
    stream = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
    stream.communicate()
    stream.wait()

    if "6Digit" in newFile:
        # A clipping path is added here that cuts off the numbers of the kenton barcode, so we open the svg
        # and remove them manually from filenames with 6digit in them
        removeArray = []
        tree = ElementTree()
        tree.parse(newFile)
        for nodes in tree.iter("{http://www.w3.org/2000/svg}defs"):
            for node in nodes.iter("{http://www.w3.org/2000/svg}clipPath"):
                removeArray.append(node)
            # there are 3 clipping paths and we only need to remove the last two that cut off the numbers,
            # removing the first one adds a weird dash mark we do not want..
            nodes.remove(removeArray[-1])
            nodes.remove(removeArray[-2])
        tree.write(newFile)
    else:
        # Many clipping paths are addeded that cut off the numbers and words of the Corrugated barcode,
        # so we open the svg and remove them manually from filenames with 6digit in them by removing the defs tag
        # that houses all the clipping path tags
        removeArray = []
        tree = ElementTree()
        tree.parse(newFile)
        for nodes in tree.iter("{http://www.w3.org/2000/svg}svg"):
            for node in nodes.iter("{http://www.w3.org/2000/svg}defs"):
                nodes.remove(node)
        tree.write(newFile)

    vector_graphic = svglib.svg2rlg(newFile)
    vector_graphic.scale(0.8, 0.8)
    # This ensures the final SVGs are 100% black CMYK
    convert_svg_to_color(vector_graphic)

    self.drawing.add(vector_graphic)


class StamperBoxElement(CollidableElement):
    """
    This class represents a single stamper box. This is an empty rectangle that
    is situated on one of the upper corners of a label barcode area.
    """

    def __init__(self, name, bottom_left_x, bottom_left_y, width, height, **kwargs):
        """
        name: (str) Description name of the object.
        bottom_left_x: (float) X coordinate for object's bottom left point.
        bottom_left_y: (float) Y coordinate for object's bottom left point.
        width: (float) Width of element (in inches).
        height: (float) Height of element (in inches).
        """
        super(StamperBoxElement, self).__init__(name, bottom_left_x, bottom_left_y, width, height, **kwargs)
        self.drawing = Drawing()
        self.drawing.add(
            Rect(
                0,
                0,
                5.45 * inch,
                0.95 * inch,
                strokeWidth=4,
                strokeColor=(0, 0, 0, 1.0),
                fillColor=(0, 0, 0, 0),
            )
        )


class MachineBarcodeBoxElement(CollidableElement):
    """
    This class represents a single machine bar code box. This is an empty
    rectangle that is situated to the left of a label bar code area.
    """

    def __init__(self, name, bottom_left_x, bottom_left_y, width, height, **kwargs):
        """
        name: (str) Description name of the object.
        bottom_left_x: (float) X coordinate for object's bottom left point.
        bottom_left_y: (float) Y coordinate for object's bottom left point.
        width: (float) Width of element (in inches).
        height: (float) Height of element (in inches).
        """
        super(MachineBarcodeBoxElement, self).__init__(name, bottom_left_x, bottom_left_y, width, height, **kwargs)
        self.drawing = Drawing()
        self.drawing.add(
            Rect(
                0,
                0,
                2 * inch,
                1 * inch,
                strokeWidth=4,
                strokeColor=(0, 0, 0, 1.0),
                fillColor=(0, 0, 0, 0),
            )
        )


class CompanyLogoElement(CollidableSVGGraphicElement):
    """
    This class represents a single stamper box. This is an empty rectangle that
    is situated on one of the upper corners of a label barcode area.
    """

    def __init__(
        self,
        name,
        bottom_left_x,
        bottom_left_y,
        file_name,
        available_area_x,
        available_area_y,
        align="left",
        **kwargs,
    ):
        """
        name: (str) Description name of the object.
        bottom_left_x: (float) X coordinate for object's bottom left point.
        bottom_left_y: (float) Y coordinate for object's bottom left point.
        file_name: (str) Path to the SVG file.
        available_area_x: (int) Horiz. area available for graphic placement.
        align: (str) Left or Right, sets Horiz. alignment of graphic.
        """
        super(CompanyLogoElement, self).__init__(
            name,
            bottom_left_x,
            bottom_left_y,
            file_name,
            available_area_x,
            available_area_y,
            align="left",
            **kwargs,
        )

        # Move logo down the amount of the height of the logo. This should
        # align the top of the logo with the top margin of the panel.
        self.bottom_left_y -= self.height


class SpecialtyLogoElement(CollidableSVGGraphicElement):
    """
    This class represents a single stamper box. This is an empty rectangle that
    is situated on one of the upper corners of a label barcode area. Specialty
    logos include things like Ecotainer logos, Hold&Go logos, and Hold&Cold
    logos.
    """

    def __init__(
        self,
        name,
        bottom_left_x,
        bottom_left_y,
        file_name,
        available_area_x,
        available_area_y,
        align="left",
        **kwargs,
    ):
        """
        name: (str) Description name of the object.
        bottom_left_x: (float) X coordinate for object's bottom left point.
        bottom_left_y: (float) Y coordinate for object's bottom left point.
        file_name: (str) Path to the SVG file.
        available_area_x: (int) Horiz. area available for graphic placement.
        align: (str) Left or Right, sets Horiz. alignment of graphic.
        """
        super(SpecialtyLogoElement, self).__init__(
            name,
            bottom_left_x,
            bottom_left_y,
            file_name,
            available_area_x,
            available_area_y,
            align="left",
            **kwargs,
        )

        # Move logo down the amount of the height of the logo. This effectively
        # changes the reference corner from the bottom left corner to the top
        # left corner.
        self.bottom_left_y -= self.height


class CountLabelElement(CollidableElement, MultiLineTextElement):
    """
    This is a container for the sleeve/case count multi-line text labels that
    go on many of the panels.

    NOTE: This class is a child of both CollidableElement and
    MultiLineTextElement, and inherits behaviors and attributes from both.
    """

    def __init__(
        self,
        name,
        bottom_left_x,
        bottom_left_y,
        lines,
        font="Helvetica-Bold",
        size=26,
        **kwargs,
    ):
        """
        name: (str) Description name of the object.
        bottom_left_x: (float) X coordinate for object's bottom left point.
        bottom_left_y: (float) Y coordinate for object's bottom left point.
        lines: (list of strings) Lines of text to be rendered.
        font: (str) The name of a registered font.
        size: (int/float) Text size in po ints.
        """
        # Call the CollidableElement superclass's __init__ method. This sets
        # the coordinate attributes up. Note that we'll set the width and
        # height attributes later, None works for now.
        CollidableElement.__init__(self, name, bottom_left_x, bottom_left_y, None, None, **kwargs)

        # Call the MultiLineTextElement's superclass's __init__ method, which
        # also calculates and sets the width and height attributes, along with
        # a self.drawing attribute.
        MultiLineTextElement.__init__(self, lines, font=font, size=size)
        # By the end of this, we've got all of the normal attributes, along
        # with self.drawing. This matches up with the other label classes
        # in this module.


class FlapTextElement(CollidableElement, MultiLineTextElement):
    """
    This is a container text on the flaps that say "This side XXX" in
    three different languages (English, Spanish, French)

    NOTE: This class is a child of both CollidableElement and
    MultiLineTextElement, and inherits behaviors and attributes from both.
    """

    def __init__(
        self,
        name,
        bottom_left_x,
        bottom_left_y,
        lines,
        font="Helvetica-Bold",
        size=26,
        **kwargs,
    ):
        """
        name: (str) Description name of the object.
        bottom_left_x: (float) X coordinate for object's bottom left point.
        bottom_left_y: (float) Y coordinate for object's bottom left point.
        lines: (list of strings) Lines of text to be rendered.
        font: (str) The name of a registered font.
        size: (int/float) Text size in po ints.
        """
        # Call the CollidableElement superclass's __init__ method. This sets
        # the coordinate attributes up. Note that we'll set the width and
        # height attributes later, None works for now.
        CollidableElement.__init__(self, name, bottom_left_x, bottom_left_y, None, None, **kwargs)

        # Call the MultiLineTextElement's superclass's __init__ method, which
        # also calculates and sets the width and height attributes, along with
        # a self.drawing attribute.
        MultiLineTextElement.__init__(self, lines, font=font, size=size)
        # By the end of this, we've got all of the normal attributes, along
        # with self.drawing. This matches up with the other label classes
        # in this module.


class ItemDescriptionElement(CollidableElement, MultiLineTextElement):
    """
    This is a container for the item description and lid information
    multi-line text labels that go on many of the panels.

    NOTE: This class is a child of both CollidableElement and
    MultiLineTextElement, and inherits behaviors and attributes from both.
    """

    def __init__(
        self,
        name,
        bottom_left_x,
        bottom_left_y,
        lines,
        font="Helvetica",
        size=17.5,
        **kwargs,
    ):
        """
        name: (str) Description name of the object.
        bottom_left_x: (float) X coordinate for object's bottom left point.
        bottom_left_y: (float) Y coordinate for object's bottom left point.
        lines: (list of strings) Lines of text to be rendered.
        font: (str) The name of a registered font.
        size: (int/float) Text size in points.
        """
        # Call the CollidableElement superclass's __init__ method. This sets
        # the coordinate attributes up. Note that we'll set the width and
        # height attributes later, None works for now.
        CollidableElement.__init__(self, name, bottom_left_x, bottom_left_y, None, None, **kwargs)

        # Call the MultiLineTextElement's superclass's __init__ method, which
        # also calculates and sets the width and height attributes, along with
        # a self.drawing attribute.
        MultiLineTextElement.__init__(self, lines, font=font, size=size)
        # By the end of this, we've got all of the normal attributes, along
        # with self.drawing. This matches up with the other label classes
        # in this module.


class Code128Barcode_Kenton(CollidableElement):
    """6-digit barcode for Kenton that goes on the underside of the box."""

    def __init__(self, name, bottom_left_x, bottom_left_y, six_digit_code, box_id, method):
        """
        name: (str) Description name of the object.
        bottom_left_x: (float) X coordinate for object's bottom left point.
        bottom_left_y: (float) Y coordinate for object's bottom left point.
        six_digit_code: (int) An identifying number.
        box_id: (int) ID of the generated box to get info from GOLD
        method: (Str) Either automationEngine of reportlab to decide how we generate the barcode.
        """
        width = 2.0
        height = 1.5

        # Set up the stuff the collision detection needs.
        super(Code128Barcode_Kenton, self).__init__(name, bottom_left_x, bottom_left_y, width, height)

        self.drawing = Drawing()

        """
        The method will determine if we are just trying to review the pdf (use the reportlab barcodes) or if
        this is supposed to be a production ready pfd (use the automationEngine barcodes)
        """
        if method == "automationEngine":
            place_barcode(self, str(box_id) + "_" + sixDigit)
        else:
            black_color = CMYKColor(0, 0, 0, 1.0)
            bcode_draw = barcode.createBarcodeDrawing(
                "Code128",
                barFillColor=black_color,
                barStrokeColor=black_color,
                textColor=black_color,
                width=width * inch,
                height=height * inch,
                quiet=False,
                barWidth=0.008 * inch,
                value="0" + str(six_digit_code),
                humanReadable=True,
            )
            self.drawing.add(bcode_draw)


class LabelAreaElement(CollidableElement):
    """
    The label area element is a big box containing barcodes and description
    text, straddling panels A and B (the left two).
    """

    def __init__(
        self,
        name,
        bottom_left_x,
        bottom_left_y,
        nine_digit_num,
        fourteen_digit_num,
        text_line_1,
        text_line_2,
        plant,
        case_count,
        pdf_type,
        box_id,
        method,
        **kwargs,
    ):
        """
        Place label area, barcodes, and other text.

        name: (str) Description name of the object.
        bottom_left_x: (float) X coordinate for object's bottom left point.
        bottom_left_y: (float) Y coordinate for object's bottom left point.
        nine_digit_num: (int) An identifying number.
        fourteen_digit_num: (int) An identifying number.
        text_line_1: (str) The text to appear on line 1 of the label.
        text_line_2: (str) The text to appear on line 2 of the label.
        plant: (str) String name of the plant this will be printed at.
        case_count: (int) Number of cups in the case.
        box_id: (int) ID of the generated box to get info from GOLD
        method: (Str) Either automationEngine of reportlab to decide how we generate the barcode.
        """
        # Width is a constant 12 inches.
        self.width = 12
        # This is also constant.
        self.height = 4.125

        self.drawing = Drawing()
        # Set up the stuff the collision detection needs.
        super(LabelAreaElement, self).__init__(name, bottom_left_x, bottom_left_y, self.width, self.height, **kwargs)

        # Dashed box containing barcodes, crosses corner
        if plant:
            if plant.lower() == "shelbyville":
                label_delta_y = 1.15
            else:
                label_delta_y = 2.0
        else:
            label_delta_y = 0.0
        # Perform Y adjustment.
        self.bottom_left_y += label_delta_y

        """
        The method will determine if we are just trying to review the pdf (use the reportlab barcodes) or if
        this is supposed to be a production ready pfd (use the automationEngine barcodes)
        """
        if method == "automationEngine":
            # If pdf_type == 1 or 3 then The auto-corr. pdf is without a label
            if pdf_type == 1 or pdf_type == 3:
                # Create the box drawing element.
                self.drawing.add(
                    Rect(
                        0,
                        0,
                        self.width * inch,
                        self.height * inch,
                        strokeWidth=4,
                        strokeDashArray=(15, 15),
                        strokeColor=(0.0, 0.0, 0.0, 1.0),
                        fillColor=(0.0, 0.0, 0.0, 0.0),
                    )
                )

                return
            place_barcode(self, str(box_id) + "_" + labelArea)
        else:
            if case_count:
                # Figure case text and plant code (ie 2400/cs  <line break> 045)
                if plant:
                    if plant.lower() == "shelbyville":
                        plant_code = "045"
                    elif plant.lower() == "kenton":
                        plant_code = "031"
                    elif plant.lower() == "visalia":
                        plant_code = "033"
                    elif plant.lower() == "clarksville":
                        plant_code = "055"
                    elif plant.lower() == "pittston":
                        plant_code = "056"
                    else:
                        plant_code = ""

                else:
                    plant_code = ""

                case_text = "%s/CS" % str(case_count)
            else:
                case_text = None
                plant_code = ""

            # Create the box drawing element.
            self.drawing.add(
                Rect(
                    0,
                    0,
                    self.width * inch,
                    self.height * inch,
                    strokeWidth=4,
                    strokeDashArray=(15, 15),
                    strokeColor=(0.0, 0.0, 0.0, 1.0),
                    fillColor=(0.0, 0.0, 0.0, 0.0),
                )
            )

            # If pdf_type == 1 or 3 then The auto-corr. pdf is without a label
            if pdf_type is None:
                pdf_type = 0
            if pdf_type == 1 or pdf_type == 3:
                return

            # Left and right nine digit barcodes.
            self.__generate_barcode("code128", nine_digit_num, 0.4, 3.55)
            self.__generate_barcode("code128", nine_digit_num, 8.55, 3.55)

            # Left nine digit label.
            nine_digit_bottom_left_x = 0.5 * inch
            nine_digit_bottom_left_y = 2.60 * inch
            self.drawing.add(
                String(
                    nine_digit_bottom_left_x,
                    nine_digit_bottom_left_y,
                    str(nine_digit_num),
                    fontName="Helvetica",
                    fontSize=24,
                    fillColor=(0, 0, 0, 1),
                )
            )

            # Right nine digit label.
            nine_digit_bottom_left_x = 7.25 * inch
            self.drawing.add(
                String(
                    nine_digit_bottom_left_x,
                    nine_digit_bottom_left_y,
                    str(nine_digit_num),
                    fontName="Helvetica",
                    fontSize=24,
                    fillColor=(0, 0, 0, 1),
                )
            )

            # Text descriptions under 9-digit barcode.
            description_bottom_left_x = 0.25 * inch
            description_bottom_left_y = 2.175 * inch

            # Line 1 on the left side.
            self.drawing.add(
                String(
                    description_bottom_left_x,
                    description_bottom_left_y,
                    text_line_1.upper(),
                    fontName="Helvetica",
                    fontSize=24,
                    fillColor=(0, 0, 0, 1),
                )
            )
            # Line 1 on the right side.
            description_bottom_left_x += 6.45 * inch
            self.drawing.add(
                String(
                    description_bottom_left_x,
                    description_bottom_left_y,
                    text_line_1.upper(),
                    fontName="Helvetica",
                    fontSize=24,
                    fillColor=(0, 0, 0, 1),
                )
            )
            if case_text:
                # Draw case and plant code on left side.
                case_codes_left_x = 4.25 * inch
                case_codes_y = 3.5 * inch
                self.drawing.add(
                    String(
                        case_codes_left_x,
                        case_codes_y,
                        case_text.upper(),
                        fontName="Helvetica",
                        fontSize=18,
                        fillColor=(0, 0, 0, 1),
                    )
                )
                case_codes_y = 3.25 * inch
                self.drawing.add(
                    String(
                        case_codes_left_x,
                        case_codes_y,
                        plant_code.upper(),
                        fontName="Helvetica",
                        fontSize=18,
                        fillColor=(0, 0, 0, 1),
                    )
                )

            # Line 2 on the left side.
            description_bottom_left_x -= 6.45 * inch
            description_bottom_left_y = 1.825 * inch
            self.drawing.add(
                String(
                    description_bottom_left_x,
                    description_bottom_left_y,
                    text_line_2.upper(),
                    fontName="Helvetica",
                    fontSize=24,
                    fillColor=(0, 0, 0, 1),
                )
            )
            # Line 2 on the right side.
            description_bottom_left_x += 6.45 * inch
            self.drawing.add(
                String(
                    description_bottom_left_x,
                    description_bottom_left_y,
                    text_line_2.upper(),
                    fontName="Helvetica",
                    fontSize=24,
                    fillColor=(0, 0, 0, 1),
                )
            )

            if case_text:
                # Draw case and plant code on right side.
                case_codes_right_x = 10.75 * inch
                case_codes_y = 3.5 * inch
                self.drawing.add(
                    String(
                        case_codes_right_x,
                        case_codes_y,
                        case_text.upper(),
                        fontName="Helvetica",
                        fontSize=18,
                        fillColor=(0, 0, 0, 1),
                    )
                )
                case_codes_y = 3.25 * inch
                self.drawing.add(
                    String(
                        case_codes_right_x,
                        case_codes_y,
                        plant_code.upper(),
                        fontName="Helvetica",
                        fontSize=18,
                        fillColor=(0, 0, 0, 1),
                    )
                )

            # Fourteen digit barcodes.
            self.__generate_barcode("I2of5", fourteen_digit_num, 0.0, 0.1)
            self.__generate_barcode("I2of5", fourteen_digit_num, 7.0, 0.1)

    def __generate_barcode(self, type, code, x, y):
        """
        Generate some barcodes, fool!

        type: (str) One of either 'code128' or 'I2of5' for barcode type.
        code: (str) Number to encode.
        x: (float) Position of the barcode.
        y: (float) Position of the barcode.
        """
        black_color = CMYKColor(0, 0, 0, 1.0)
        if type.lower() == "code128":
            bcode_draw = barcode.createBarcodeDrawing(
                "Code128",
                barFillColor=black_color,
                barStrokeColor=black_color,
                textColor=black_color,
                width=3.644 * inch,
                height=1.214 * inch,
                quiet=False,
                barWidth=0.0085 * inch,
                value="0" + str(code),
            )
        elif type.lower() == "i2of5":
            bcode_draw = barcode.createBarcodeDrawing(
                "I2of5",
                barFillColor=black_color,
                barStrokeColor=black_color,
                textColor=black_color,
                width=5.4 * inch,
                height=1.60 * inch,
                value=str(code),
                checksum=False,
                bearers=False,
                fontName="Helvetica",
                fontSize=6.5,
                humanReadable=True,
            )

        bcode_draw.translate(x * pica, y * pica)

        self.drawing.add(bcode_draw)
