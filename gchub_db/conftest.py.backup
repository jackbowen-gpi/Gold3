"""Minimal package conftest shim.

This file intentionally keeps logic minimal: ensure the repository root/parent
are on sys.path so imports like `gchub_db` resolve, but don't try to load
or alias other modules. This restores canonical project behavior while
preventing pytest import errors for package-style conftest imports.
"""

import os
import sys

_here = os.path.dirname(os.path.abspath(__file__))
_repo_root = os.path.dirname(_here)
_repo_parent = os.path.dirname(_repo_root)
for _p in (_repo_parent, _repo_root):
    _ap = os.path.abspath(_p)
    if _ap not in [os.path.abspath(x) for x in sys.path]:
        sys.path.insert(0, _ap)
"""Package-level pytest conftest shim.

This file makes pytest importable when tests import `gchub_db.conftest` by
loading the repository-root `conftest.py` (if present) and registering it
under both `conftest` and `gchub_db.conftest`. It also ensures a stable
fallback URLConf is available during tests so URL reversing used by unit
tests does not depend on import-order of the legacy repo URL modules.
"""
import importlib
import importlib.util
import os
import sys


def _ensure_repo_paths():
    pkg_dir = os.path.dirname(os.path.abspath(__file__))
    repo_root = os.path.dirname(pkg_dir)
    repo_parent = os.path.dirname(repo_root)
    for p in (repo_parent, repo_root):
        p_abs = os.path.abspath(p)
        if p_abs not in [os.path.abspath(x) for x in sys.path]:
            sys.path.insert(0, p_abs)
    return repo_root, repo_parent


try:
    repo_root, repo_parent = _ensure_repo_paths()

    # Load the repository-root conftest.py as the canonical conftest module
    root_conftest = os.path.join(repo_root, "conftest.py")
    if os.path.exists(root_conftest):
        spec = importlib.util.spec_from_file_location("conftest", root_conftest)
        module = importlib.util.module_from_spec(spec)
        # register before executing to avoid recursive-import issues
        sys.modules["conftest"] = module
        sys.modules["gchub_db.conftest"] = module
        spec.loader.exec_module(module)
except Exception:
    # Fail-safe: don't let the shim break pytest collection.
    pass


def _ensure_fallback_urlconf():
    """Import or load the fallback URLConf and register it as
    `gchub_db.test_urls` and set `TEST_ROOT_URLCONF` so tests use it.
    """
    try:
        fallback_name = "gchub_db._test_urls_fallback"
        try:
            fallback_mod = importlib.import_module(fallback_name)
        except Exception:
            # try loading from the same package directory
            candidate = os.path.join(
                os.path.dirname(__file__), "_test_urls_fallback.py"
            )
            if os.path.exists(candidate):
                spec = importlib.util.spec_from_file_location(fallback_name, candidate)
                fallback_mod = importlib.util.module_from_spec(spec)
                sys.modules[fallback_name] = fallback_mod
                spec.loader.exec_module(fallback_mod)
            else:
                fallback_mod = None

        if fallback_mod is not None:
            os.environ.setdefault("TEST_ROOT_URLCONF", fallback_name)
            # register as gchub_db.test_urls so imports succeed
            sys.modules["gchub_db.test_urls"] = fallback_mod
            if "gchub_db" in sys.modules:
                setattr(sys.modules["gchub_db"], "test_urls", fallback_mod)
    except Exception:
        pass


_ensure_fallback_urlconf()
