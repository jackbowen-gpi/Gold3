name: CI - Python tests

on:
  push:
    branches: [ main, jb ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: gchub_test
          POSTGRES_USER: gchub
          POSTGRES_PASSWORD: gchub
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d gchub_test" \
          --health-interval=5s --health-timeout=5s --health-retries=20
    strategy:
      matrix:
        python-version: [3.11, 3.12, 3.13]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt || true; fi
          # ensure tooling available
          pip install --no-cache-dir ruff coverage codecov factory_boy

      - name: Lint with ruff
        run: |
          ruff check . || true

      - name: Wait for Postgres and set env
        run: |
          # configure environment vars for test settings
          echo "TEST_PG_NAME=gchub_test" >> $GITHUB_ENV
          echo "TEST_PG_USER=gchub" >> $GITHUB_ENV
          echo "TEST_PG_PASSWORD=gchub" >> $GITHUB_ENV
          echo "TEST_PG_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "TEST_PG_PORT=5432" >> $GITHUB_ENV
          # wait for postgres to be ready
          for i in {1..30}; do pg_isready -h 127.0.0.1 -p 5432 -U postgres && exit 0 || sleep 2; done
          echo "Postgres readiness check complete"

      - name: Run migrations
        env:
          DJANGO_SETTINGS_MODULE: gchub_db.test_settings
          TEST_PG_NAME: ${{ env.TEST_PG_NAME }}
          TEST_PG_USER: ${{ env.TEST_PG_USER }}
          TEST_PG_PASSWORD: ${{ env.TEST_PG_PASSWORD }}
          TEST_PG_HOST: ${{ env.TEST_PG_HOST }}
          TEST_PG_PORT: ${{ env.TEST_PG_PORT }}
        run: |
          python manage.py migrate --noinput --settings=gchub_db.test_settings

      - name: Run Django tests with coverage
        env:
          DJANGO_SETTINGS_MODULE: gchub_db.test_settings
          TEST_PG_NAME: ${{ env.TEST_PG_NAME }}
          TEST_PG_USER: ${{ env.TEST_PG_USER }}
          TEST_PG_PASSWORD: ${{ env.TEST_PG_PASSWORD }}
          TEST_PG_HOST: ${{ env.TEST_PG_HOST }}
          TEST_PG_PORT: ${{ env.TEST_PG_PORT }}
        run: |
          coverage run --source=. manage.py test --verbosity 2 --settings=gchub_db.test_settings
          coverage xml -i
          coverage report -m

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          fail_ci_if_error: false

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
